{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","class","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,yLCuC5BC,MA/Bf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC7B,IACD,2BACED,UAAU,aACVE,GAAIH,EAAKE,IACTE,MAAOJ,EAAKK,KACZC,SAAU,SAACC,GAAD,OAAOX,EAAMY,UAAUD,EAAEE,OAAOL,MAAOJ,EAAKE,QAC9C,IACV,4BACEQ,QAAS,kBAAMd,EAAMe,WAAWX,EAAKE,MACrCD,UAAU,gBAEV,uBAAGW,MAAM,oBAMjB,OACE,6BACE,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC7BjB,KC2DMkB,E,kDAvFb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,MAAQ,CACXlB,MAAO,GACPmB,YAAa,CACXZ,KAAM,GACNH,IAAK,KAGT,EAAKgB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKX,UAAY,EAAKA,UAAUW,KAAf,gBAZA,E,wDAcPZ,GACVc,KAAKC,SAAS,CACZL,YAAa,CACXZ,KAAME,EAAEE,OAAOL,MACfF,IAAKqB,KAAKC,W,8BAKRjB,GACNA,EAAEkB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACS,KAAjBA,EAAQrB,KAAa,CACvB,IAAMwB,EAAQ,sBAAOR,KAAKL,MAAMlB,OAAlB,CAAyB4B,IACvCL,KAAKC,SAAS,CACZxB,MAAO+B,EACPZ,YAAa,CACXZ,KAAM,GACNH,IAAK,S,iCAMFA,GACT,IAAM4B,EAAgBT,KAAKL,MAAMlB,MAAMiC,QAAO,SAAC/B,GAC7C,OAAOA,EAAKE,MAAQA,KAEtBmB,KAAKC,SAAS,CACZxB,MAAOgC,EACPb,YAAa,CACXZ,KAAM,GACNH,IAAK,Q,gCAKDE,EAAOF,GACf,IAAMJ,EAAQuB,KAAKL,MAAMlB,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKK,KAAOD,MAGhBiB,KAAKC,SAAS,CACZxB,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,0BAAME,GAAG,aAAa6B,SAAUX,KAAKD,SACnC,2BACEa,YAAY,eACZC,KAAK,OACL9B,MAAOiB,KAAKL,MAAMC,YAAYZ,KAC9BC,SAAUe,KAAKH,cAEjB,4BAAQgB,KAAK,UACX,uBAAGjC,UAAU,2BAGjB,kBAAC,EAAD,CACEH,MAAOuB,KAAKL,MAAMlB,MAClBa,WAAYU,KAAKV,WACjBH,UAAWa,KAAKb,iB,GAjFR2B,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.b5bfeb9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./ListItems.css\";\nimport FlipMove from \"react-flip-move\";\n\nfunction deleteItem() {\n  console.log(\"test\");\n}\n\nfunction ListItems(props) {\n  const items = props.items;\n  const listItems = items.map((item) => {\n    return (\n      <div className=\"list\" key={item.key}>\n        {\" \"}\n        <input\n          className=\"inputTasks\"\n          id={item.key}\n          value={item.text}\n          onChange={(e) => props.setUpdate(e.target.value, item.key)}\n        ></input>{\" \"}\n        <button\n          onClick={() => props.deleteItem(item.key)}\n          className=\"deleteButton\"\n        >\n          <i class=\"trash icon\"></i>\n        </button>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <FlipMove duration={200} easing=\"ease-in-out\">\n        {listItems}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default ListItems;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ListItems from \"./ListItems.js\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter((item) => {\n      return item.key !== key;\n    });\n    this.setState({\n      items: filteredItems,\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    });\n  }\n\n  setUpdate(value, key) {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        item.text = value;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input\n            placeholder=\"Enter a Task\"\n            type=\"text\"\n            value={this.state.currentItem.text}\n            onChange={this.handleInput}\n          ></input>\n          <button type=\"submit\">\n            <i className=\"plus square icon big\"></i>\n          </button>\n        </form>\n        <ListItems\n          items={this.state.items}\n          deleteItem={this.deleteItem}\n          setUpdate={this.setUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}